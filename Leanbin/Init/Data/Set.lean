prelude 
import Leanbin.Init.Meta.Interactive 
import Leanbin.Init.Control.Lawful

universe u v

def Set (Œ± : Type u) :=
  Œ± ‚Üí Prop

def SetOf {Œ± : Type u} (p : Œ± ‚Üí Prop) : Set Œ± :=
  p

namespace Set

variable {Œ± : Type u} {Œ≤ : Type v}

protected def mem (a : Œ±) (s : Set Œ±) :=
  s a

instance : HasMem Œ± (Set Œ±) :=
  ‚ü®Set.Mem‚ü©

protected def subset (s‚ÇÅ s‚ÇÇ : Set Œ±) :=
  ‚àÄ ‚¶Éa‚¶Ñ, a ‚àà s‚ÇÅ ‚Üí a ‚àà s‚ÇÇ

instance : HasSubset (Set Œ±) :=
  ‚ü®Set.Subset‚ü©

-- failed to parenthesize: parenthesize: uncaught backtrack exception
-- failed to format: format: uncaught backtrack exception
protected def sep ( p : Œ± ‚Üí Prop ) ( s : Set Œ± ) : Set Œ± := { a | a ‚àà s ‚àß p a }

instance : HasSep Œ± (Set Œ±) :=
  ‚ü®Set.Sep‚ü©

instance : HasEmptyc (Set Œ±) :=
  ‚ü®fun a => False‚ü©

def univ : Set Œ± :=
  fun a => True

-- failed to parenthesize: parenthesize: uncaught backtrack exception
-- failed to format: format: uncaught backtrack exception
protected def insert ( a : Œ± ) ( s : Set Œ± ) : Set Œ± := { b | b = a ‚à® b ‚àà s }

instance : HasInsert Œ± (Set Œ±) :=
  ‚ü®Set.Insert‚ü©

-- failed to parenthesize: parenthesize: uncaught backtrack exception
-- failed to format: format: uncaught backtrack exception
instance : HasSingleton Œ± Set Œ± := ‚ü® fun a => { b | b = a } ‚ü©

instance : IsLawfulSingleton Œ± (Set Œ±) :=
  ‚ü®fun a => funext$ fun b => propext$ or_false‚Çì _‚ü©

-- failed to parenthesize: parenthesize: uncaught backtrack exception
-- failed to format: format: uncaught backtrack exception
protected def union ( s‚ÇÅ s‚ÇÇ : Set Œ± ) : Set Œ± := { a | a ‚àà s‚ÇÅ ‚à® a ‚àà s‚ÇÇ }

instance : HasUnion (Set Œ±) :=
  ‚ü®Set.Union‚ü©

-- failed to parenthesize: parenthesize: uncaught backtrack exception
-- failed to format: format: uncaught backtrack exception
protected def inter ( s‚ÇÅ s‚ÇÇ : Set Œ± ) : Set Œ± := { a | a ‚àà s‚ÇÅ ‚àß a ‚àà s‚ÇÇ }

instance : HasInter (Set Œ±) :=
  ‚ü®Set.Inter‚ü©

-- failed to parenthesize: parenthesize: uncaught backtrack exception
-- failed to format: format: uncaught backtrack exception
def compl ( s : Set Œ± ) : Set Œ± := { a | a ‚àâ s }

-- failed to parenthesize: parenthesize: uncaught backtrack exception
-- failed to format: format: uncaught backtrack exception
protected def diff ( s t : Set Œ± ) : Set Œ± := { a ‚àà s | a ‚àâ t }

instance : HasSdiff (Set Œ±) :=
  ‚ü®Set.Diff‚ü©

-- failed to parenthesize: parenthesize: uncaught backtrack exception
-- failed to format: format: uncaught backtrack exception
def powerset ( s : Set Œ± ) : Set Set Œ± := { t | t ‚äÜ s }

prefix:100 "ùí´" => powerset

-- ././Mathport/Syntax/Translate/Basic.lean:452:2: warning: expanding binder collection (a ¬´expr ‚àà ¬ª s)
-- failed to parenthesize: parenthesize: uncaught backtrack exception
-- failed to format: format: uncaught backtrack exception
@[ reducible ] def sUnion ( s : Set Set Œ± ) : Set Œ± := { t | ‚àÉ ( a : _ ) ( _ : a ‚àà s ) , t ‚àà a }

prefix:110 "‚ãÉ‚ÇÄ" => sUnion

-- failed to parenthesize: parenthesize: uncaught backtrack exception
-- failed to format: format: uncaught backtrack exception
def image ( f : Œ± ‚Üí Œ≤ ) ( s : Set Œ± ) : Set Œ≤ := { b | ‚àÉ a , a ‚àà s ‚àß f a = b }

instance : Functor Set :=
  { map := @Set.Image }

instance : IsLawfulFunctor Set :=
  { id_map := fun _ s => funext$ fun b => propext ‚ü®fun ‚ü®_, sb, rfl‚ü© => sb, fun sb => ‚ü®_, sb, rfl‚ü©‚ü©,
    comp_map :=
      fun _ _ _ g h s =>
        funext$
          fun c =>
            propext
              ‚ü®fun ‚ü®a, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü© => ‚ü®g a, ‚ü®‚ü®a, ‚ü®h‚ÇÅ, rfl‚ü©‚ü©, h‚ÇÇ‚ü©‚ü©,
                fun ‚ü®b, ‚ü®‚ü®a, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©, h‚ÇÉ‚ü©‚ü© =>
                  ‚ü®a,
                    ‚ü®h‚ÇÅ,
                      by 
                        dsimp <;> cc‚ü©‚ü©‚ü© }

end Set

